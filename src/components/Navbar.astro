---
import { Icon } from "astro-icon/components";

import { navBarConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import NavDropdown from "./NavDropdown.astro";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import NavMenuPanel from "./widget/NavMenuPanel.astro";

const className = Astro.props.class;

// 获取导航栏透明度配置，默认为 100（完全不透明）
const navbarOpacity = navBarConfig.opacity ?? 100;
// 将百分比转换为 0-1 的小数值
const opacityValue = Math.max(0, Math.min(100, navbarOpacity)) / 100;

// 服务端检测文章页面路径前缀
const POSTS_PATH_PREFIX = "/posts/";
const isPostPage = Astro.url.pathname.startsWith(POSTS_PATH_PREFIX);

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---
<div id="navbar" class="z-50 onload-animation" style={`--navbar-opacity: ${opacityValue};`}>
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition" style={`opacity: ${opacityValue};`}></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "card-base navbar-with-opacity !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4"]}>
        <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
            <div class="flex flex-row text-[var(--primary)] items-center text-md">
                <img src={siteConfig.favicon[0]?.src || "/favicon/icon_32.webp"} alt={`${siteConfig.title} 首页`} class="w-8 h-8 mr-2 mb-1 rounded-sm" />
                {siteConfig.title}
            </div>
        </a>
        <div class="hidden md:flex">
            {links.map((l) => {
                // 检查是否有子菜单
                const hasChildren = l.children && l.children.length > 0;
                
                if (hasChildren) {
                    return <NavDropdown title={l.name} items={l.children!} />;
                }
                // 其他链接保持原样
                return <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                          class="btn-plain scale-animation rounded-lg md:h-11 h-12 font-bold px-5 active:scale-95"
                >
                    <div class="flex items-center">
                        {l.name}
                        {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                    </div>
                </a>;
            })}
        </div>
        <div class:list={["navbar-controls flex items-center", { "post-page-mode": isPostPage }]}>
            <div class="search-container">
                <Search client:only="svelte"></Search>
            </div>
            <div class="buttons-container flex">
                {!siteConfig.themeColor.fixed && (
                        <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg md:h-11 md:w-11 h-12 w-12 active:scale-90" id="display-settings-switch">
                            <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                        </button>
                )}
                <LightDarkSwitch client:only="svelte"></LightDarkSwitch>
            </div>
            <button aria-label="Menu" class="btn-plain scale-animation rounded-lg md:w-11 md:h-11 w-12 h-12 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        <NavMenuPanel links={links}></NavMenuPanel>
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script define:vars={{ POSTS_PATH_PREFIX }}>
// 客户端路由切换时动态更新
function updateNavbarForPostPage() {
    const navbar = document.querySelector('.navbar-controls');
    if (navbar) {
        const isPostPage = window.location.pathname.startsWith(POSTS_PATH_PREFIX);
        navbar.classList.toggle('post-page-mode', isPostPage);
    }
}

// 页面加载时检测
document.addEventListener('DOMContentLoaded', () => {
    // 显示设置按钮
    const settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.addEventListener('click', () => {
            document.getElementById("display-setting")?.classList.toggle("float-panel-closed");
        });
    }

    // 导航菜单按钮
    const menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.addEventListener('click', () => {
            document.getElementById("nav-menu-panel")?.classList.toggle("float-panel-closed");
        });
    }
});

// 动态计算按钮容器宽度，用于搜索框动画偏移
function updateButtonsOffset() {
    const buttonsContainer = document.querySelector('.buttons-container');
    const navbarControls = document.querySelector('.navbar-controls');
    if (buttonsContainer && navbarControls) {
        const actualWidth = buttonsContainer.offsetWidth;
        navbarControls.style.setProperty('--buttons-offset', `${actualWidth}px`);
    }
}

// 监听页面切换
document.addEventListener('astro:page-load', () => {
    updateNavbarForPostPage();
    updateButtonsOffset();
});

// 页面加载时计算按钮宽度
document.addEventListener('DOMContentLoaded', updateButtonsOffset);
window.addEventListener('resize', updateButtonsOffset);
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
// Pagefind加载
async function loadPagefind() {
    try {
        const pagefind = await import(scriptUrl);
        await pagefind.options({ excerptLength: 20 });
        window.pagefind = pagefind;
        document.dispatchEvent(new CustomEvent('pagefindready'));
    } catch (error) {
        console.warn('Pagefind load failed:', error);
        window.pagefind = { search: () => Promise.resolve({ results: [] }) };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}

<style>
.navbar-controls {
    position: relative;
}

.buttons-container {
    transition: opacity 0.1s ease-out, transform 0.3s ease-out;
}

.search-container {
    transition: transform 0.3s ease-out;
}

/* 文章页模式下的动画 */
.navbar-controls.post-page-mode .buttons-container {
    opacity: 0;
    pointer-events: none;
    transform: translateX(100%);
}

.navbar-controls.post-page-mode > .search-container {
    transform: translateX(var(--buttons-offset, 6rem));
}


</style>
