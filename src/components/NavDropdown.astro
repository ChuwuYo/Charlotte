---
import { Icon } from "astro-icon/components";
import { url } from "../utils/url-utils";
import { type NavBarLink } from "../types/config";

interface Props {
	title: string;
	items: NavBarLink[];
	class?: string;
}

const { title, items, class: className } = Astro.props;
const dropdownId = `dropdown-${title.toLowerCase()}`;
---

<!-- 事件委托避免全局函数 -->
<div 
    class={`relative z-50 ${className || ''}`} 
    role="menu" 
    tabindex="-1" 
    id={dropdownId}
    data-dropdown-container
>
    <button 
        aria-label={`${title} Menu`} 
        role="menuitem" 
        class="relative btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95 flex items-center gap-1" 
        data-dropdown-trigger
    >
        {title}
        <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1rem] transition-transform" />
    </button>

    <div 
        class="absolute transition float-panel-closed top-11 -right-2 pt-5"
        data-dropdown-panel
    >
        <div class="card-base float-panel p-2">
            {items.map((item) => (
                <a 
                    href={item.external ? item.url : url(item.url)} 
                    target={item.external ? "_blank" : null}
                    class="flex transition whitespace-nowrap items-center !justify-start w-full btn-plain scale-animation rounded-lg h-9 px-3 font-medium active:scale-95 mb-0.5 last:mb-0"
                >
                    <span class="mr-3">{item.name}</span>
                    {item.external && (
                        <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-auto text-black/[0.2] dark:text-white/[0.2]" />
                    )}
                </a>
            ))}
        </div>
    </div>
</div>

<script>
// 事件委托和作用域封装，避免全局污染
(function() {
    function initDropdown() {
        // 为所有下拉菜单容器添加事件监听器
        const dropdownContainers = document.querySelectorAll('[data-dropdown-container]');
        
        dropdownContainers.forEach(container => {
            const trigger = container.querySelector('[data-dropdown-trigger]');
            const panel = container.querySelector('[data-dropdown-panel]');
            const icon = trigger?.querySelector('svg');
            if (!panel || !trigger) return;
            
            let isOpen = false;
            
            // 切换下拉框状态
            function toggleDropdown() {
                isOpen = !isOpen;
                if (isOpen) {
                    panel.classList.remove('float-panel-closed');
                    icon?.style.setProperty('transform', 'rotate(180deg)');
                } else {
                    panel.classList.add('float-panel-closed');
                    icon?.style.setProperty('transform', 'rotate(0deg)');
                }
            }
            
            // 关闭下拉框
            function closeDropdown() {
                if (isOpen) {
                    isOpen = false;
                    panel.classList.add('float-panel-closed');
                    icon?.style.setProperty('transform', 'rotate(0deg)');
                }
            }
            
            // 点击按钮切换下拉框
            trigger.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                toggleDropdown();
            });
            
            // 桌面端：鼠标悬停显示（仅当未通过点击打开时）
            container.addEventListener('mouseenter', function() {
                if (!isOpen) {
                    panel.classList.remove('float-panel-closed');
                    icon?.style.setProperty('transform', 'rotate(180deg)');
                }
            });
            
            // 桌面端：鼠标离开隐藏（仅当未通过点击打开时）
            container.addEventListener('mouseleave', function() {
                if (!isOpen) {
                    panel.classList.add('float-panel-closed');
                    icon?.style.setProperty('transform', 'rotate(0deg)');
                }
            });
            
            // 点击外部区域关闭下拉框
            document.addEventListener('click', function(e) {
                if (!container.contains(e.target as Node)) {
                    closeDropdown();
                }
            });
            
            // ESC 键关闭下拉框
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeDropdown();
                }
            });
        });
    }
    
    // 使用统一的Swup处理器模式 (来自 src/utils/swup-utils.ts)
    function createSwupHandler(initFunction: () => void) {
        // 页面加载时初始化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initFunction);
        } else {
            initFunction();
        }
        
        // 处理 Swup 页面转换
        if (typeof window !== 'undefined') {
            const setupSwup = () => {
                if (window?.swup?.hooks) {
                    window.swup.hooks.on('page:view', initFunction);
                }
            };
            
            if (window.swup) {
                setupSwup();
            } else {
                document.addEventListener('swup:enable', setupSwup);
            }
        }
    }
    
    // 使用统一的处理器
    createSwupHandler(initDropdown);
})();
</script>