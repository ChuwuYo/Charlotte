---
import { Icon } from "astro-icon/components";
import { type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";

interface Props {
	title: string;
	items: NavBarLink[];
	class?: string;
}

const { title, items, class: className } = Astro.props;
const dropdownId = `dropdown-${title.toLowerCase()}`;
---

<!-- 事件委托避免全局函数 -->
<div 
    class={`relative z-50 ${className || ''}`} 
    data-dropdown-container
>
    <button 
        aria-label={`${title} Menu`} 
        aria-haspopup="true"
        aria-expanded="false"
        aria-controls={dropdownId}
        class="relative btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95 flex items-center gap-1" 
        data-dropdown-trigger
    >
        {title}
        <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1rem] transition-transform" />
    </button>

    <div 
        id={dropdownId}
        role="menu"
        class="absolute transition float-panel-closed top-11 -right-2 pt-5"
        data-dropdown-panel
    >
        <div class="card-base float-panel p-2">
            {items.map((item) => (
                <a 
                    href={item.external ? item.url : url(item.url)} 
                    target={item.external ? "_blank" : null}
                    role="menuitem"
                    tabindex="-1"
                    class="flex transition whitespace-nowrap items-center !justify-start w-full btn-plain scale-animation rounded-lg h-9 px-3 font-medium active:scale-95 mb-0.5 last:mb-0"
                    data-dropdown-item
                >
                    <span class="mr-3">{item.name}</span>
                    {item.external && (
                        <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-auto text-black/[0.2] dark:text-white/[0.2]" />
                    )}
                </a>
            ))}
        </div>
    </div>
</div>

<style>
    /* 下拉菜单打开状态样式 */
    [data-dropdown-container].is-open [data-dropdown-trigger] svg {
        transform: rotate(180deg);
    }
    
    /* 固定状态保持悬停背景色 */
    [data-dropdown-container].is-pinned [data-dropdown-trigger] {
        background-color: var(--btn-plain-bg-hover);
    }
</style>

<script>
// 事件委托和作用域封装，避免全局污染
(function() {
    // 三种状态：'closed' | 'hover' | 'pinned'
    type DropdownState = 'closed' | 'hover' | 'pinned';
    
    // 存储每个下拉菜单的状态
    const dropdownStates = new WeakMap<HTMLElement, DropdownState>();
    
    /**
     * 获取下拉菜单的当前状态
     */
    function getState(container: HTMLElement): DropdownState {
        return dropdownStates.get(container) || 'closed';
    }
    
    /**
     * 设置下拉菜单的状态
     */
    function setState(container: HTMLElement, state: DropdownState) {
        dropdownStates.set(container, state);
        
        const panel = container.querySelector('[data-dropdown-panel]');
        const trigger = container.querySelector('[data-dropdown-trigger]');
        
        if (!panel || !trigger) return;
        
        // 更新 DOM 状态
        if (state === 'closed') {
            container.classList.remove('is-open', 'is-pinned');
            panel.classList.add('float-panel-closed');
            (trigger as HTMLElement).setAttribute('aria-expanded', 'false');
        } else {
            container.classList.add('is-open');
            panel.classList.remove('float-panel-closed');
            (trigger as HTMLElement).setAttribute('aria-expanded', 'true');
            
            // 固定状态添加特殊类名以保持悬停样式
            if (state === 'pinned') {
                container.classList.add('is-pinned');
            } else {
                container.classList.remove('is-pinned');
            }
        }
    }
    
    /**
     * 关闭所有其他下拉菜单
     */
    function closeOthers(exceptContainer: HTMLElement) {
        document.querySelectorAll('[data-dropdown-container]').forEach(container => {
            if (container !== exceptContainer) {
                setState(container as HTMLElement, 'closed');
            }
        });
    }

    /**
     * 初始化所有下拉菜单
     */
    function initDropdown() {
        const dropdownContainers = document.querySelectorAll('[data-dropdown-container]');
        
        dropdownContainers.forEach(container => {
            const trigger = container.querySelector('[data-dropdown-trigger]');
            const panel = container.querySelector('[data-dropdown-panel]');
            
            if (!panel || !trigger) return;
            
            // 避免重复绑定
            if ((container as HTMLElement).dataset.dropdownInitialized) return;
            (container as HTMLElement).dataset.dropdownInitialized = 'true';
            
            // 初始化为关闭状态（不自动展开匹配的菜单）
            setState(container as HTMLElement, 'closed');
            
            // 点击触发器：打开并固定菜单（固定状态下点击不关闭）
            trigger.addEventListener('click', function(e) {
                e.stopPropagation();
                
                const currentState = getState(container as HTMLElement);
                
                // 只有在非固定状态下才响应点击
                if (currentState !== 'pinned') {
                    // 关闭或悬停状态 → 固定
                    closeOthers(container as HTMLElement);
                    setState(container as HTMLElement, 'pinned');
                }
                // 固定状态下点击按钮不做任何事（不关闭）
            });

            // 鼠标进入：只在关闭状态时切换到悬停状态
            container.addEventListener('mouseenter', function() {
                const currentState = getState(container as HTMLElement);
                
                // 只有关闭状态才响应悬停
                if (currentState === 'closed') {
                    closeOthers(container as HTMLElement);
                    setState(container as HTMLElement, 'hover');
                }
                // pinned 和 hover 状态都不响应 mouseenter
            });
            
            // 鼠标离开：只在悬停状态时关闭
            container.addEventListener('mouseleave', function() {
                const currentState = getState(container as HTMLElement);
                
                // 只有悬停状态才会因鼠标离开而关闭
                if (currentState === 'hover') {
                    setState(container as HTMLElement, 'closed');
                }
                // pinned 和 closed 状态都不响应 mouseleave
            });

            // 点击菜单项：关闭菜单
            const menuItems = container.querySelectorAll('[data-dropdown-item]');
            menuItems.forEach(item => {
                item.addEventListener('click', function() {
                    // 点击菜单项后关闭菜单
                    setState(container as HTMLElement, 'closed');
                });
            });
            
            // 键盘导航支持
            trigger.addEventListener('keydown', (e) => {
                const keyEvent = e as KeyboardEvent;
                const currentState = getState(container as HTMLElement);
                
                if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
                    keyEvent.preventDefault();
                    keyEvent.stopPropagation();
                    
                    // 只有非固定状态才响应 Enter/Space
                    if (currentState !== 'pinned') {
                        // 关闭或悬停状态 → 固定
                        closeOthers(container as HTMLElement);
                        setState(container as HTMLElement, 'pinned');
                    }
                } else if (keyEvent.key === 'Escape') {
                    // Escape 总是关闭
                    setState(container as HTMLElement, 'closed');
                }
            });
        });
    }

    /**
     * 点击外部区域：关闭固定状态的菜单
     */
    function handleOutsideClick(e: MouseEvent) {
        document.querySelectorAll('[data-dropdown-container]').forEach(container => {
            const state = getState(container as HTMLElement);
            
            if (state === 'pinned' && !container.contains(e.target as Node)) {
                // 点击外部关闭固定的菜单
                setState(container as HTMLElement, 'closed');
            }
        });
    }

    /**
     * 清理函数：移除全局事件监听器和重置状态
     */
    function cleanup() {
        // 移除外部点击监听器
        document.removeEventListener('click', handleOutsideClick);
        
        // 关闭所有菜单
        const dropdownContainers = document.querySelectorAll('[data-dropdown-container]');
        dropdownContainers.forEach(container => {
            setState(container as HTMLElement, 'closed');
            delete (container as HTMLElement).dataset.dropdownInitialized;
        });
    }

    /**
     * 初始化函数：设置下拉菜单和全局监听器
     */
    function init() {
        // 初始化下拉菜单
        initDropdown();
        
        // 添加全局点击监听器（用于关闭点击打开的菜单）
        document.addEventListener('click', handleOutsideClick);
    }

    // 使用统一的Swup处理器模式 (来自 src/utils/swup-utils.ts)
    function createSwupHandler(initFunction: () => void) {
        // 页面加载时初始化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initFunction);
        } else {
            initFunction();
        }
        
        // 处理 Swup 页面转换
        if (typeof window !== 'undefined') {
            const setupSwup = () => {
                if (window?.swup?.hooks) {
                    // 页面切换前清理
                    window.swup.hooks.on('visit:start', cleanup);
                    // 页面切换后重新初始化
                    window.swup.hooks.on('page:view', initFunction);
                }
            };
            
            if (window.swup) {
                setupSwup();
            } else {
                document.addEventListener('swup:enable', setupSwup);
            }
        }
    }
    
    // 使用统一的处理器
    createSwupHandler(init);
})();
</script>