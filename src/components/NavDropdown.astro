---
import { Icon } from "astro-icon/components";
import { type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";

interface Props {
	title: string;
	items: NavBarLink[];
	class?: string;
}

const { title, items, class: className } = Astro.props;
const dropdownId = `dropdown-${title.toLowerCase()}`;
---

<div 
    class={`relative z-50 ${className || ''}`} 
    data-dropdown-container
>
    <button 
        aria-label={`${title} Menu`} 
        aria-haspopup="true"
        aria-expanded="false"
        aria-controls={dropdownId}
        class="relative btn-plain scale-animation rounded-lg h-12 font-bold px-5 active:scale-95 flex items-center gap-1"
        data-dropdown-trigger
    >
        {title}
        <Icon name="material-symbols:keyboard-arrow-down-rounded" class="text-[1rem] transition-transform" />
    </button>

    <div 
        id={dropdownId}
        role="menu"
        class="absolute transition float-panel-closed top-11 -right-2 pt-5"
        data-dropdown-panel
    >
        <div class="card-base float-panel p-2">
            {items.map((item) => (
                <a 
                    href={item.external ? item.url : url(item.url)} 
                    target={item.external ? "_blank" : null}
                    role="menuitem"
                    tabindex="-1"
                    class="flex transition whitespace-nowrap items-center !justify-start w-full btn-plain scale-animation rounded-lg h-12 px-3 font-medium active:scale-95 mb-0.5 last:mb-0"
                    data-dropdown-item
                >
                    <span class="mr-3">{item.name}</span>
                    {item.external && (
                        <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-auto text-black/[0.2] dark:text-white/[0.2]" />
                    )}
                </a>
            ))}
        </div>
    </div>
</div>

<style>
    [data-dropdown-container].is-pinned [data-dropdown-trigger] {
        background-color: var(--btn-plain-bg-hover);
    }
    
    [data-dropdown-container].is-open [data-dropdown-trigger] svg {
        transform: rotate(180deg);
    }
</style>

<script>
// 下拉菜单初始化
function initDropdown() {
    document.querySelectorAll('[data-dropdown-container]').forEach(container => {
        // 防重复初始化
        if ((container as HTMLElement).dataset.init) return;
        (container as HTMLElement).dataset.init = 'true';

        const trigger = container.querySelector('[data-dropdown-trigger]');
        const panel = container.querySelector('[data-dropdown-panel]');

        if (!panel || !trigger) return;

        // 点击切换菜单
        trigger.addEventListener('click', (e) => {
            e?.stopPropagation();

            const isPinned = container.classList.contains('is-pinned');
            const newState = !isPinned;

            // 更新DOM状态
            if (newState) {
                panel.classList.remove('float-panel-closed');
                (trigger as HTMLElement).setAttribute('aria-expanded', 'true');
                container.classList.add('is-pinned', 'is-open');
            } else {
                panel.classList.add('float-panel-closed');
                (trigger as HTMLElement).setAttribute('aria-expanded', 'false');
                container.classList.remove('is-pinned', 'is-open');
            }
        });

        // 悬停显示（仅当未固定时）
        container.addEventListener('mouseenter', () => {
            if (!container.classList.contains('is-pinned')) {
                panel.classList.remove('float-panel-closed');
                container.classList.add('is-open');
            }
        });

        // 鼠标离开隐藏（仅当未固定时）
        container.addEventListener('mouseleave', () => {
            if (!container.classList.contains('is-pinned')) {
                panel.classList.add('float-panel-closed');
                container.classList.remove('is-open');
            }
        });

        // 点击菜单项关闭菜单
        panel.querySelectorAll('[data-dropdown-item]').forEach(item => {
            item.addEventListener('click', () => {
                panel.classList.add('float-panel-closed');
                (trigger as HTMLElement).setAttribute('aria-expanded', 'false');
                container.classList.remove('is-pinned', 'is-open');
            });
        });
    });
}

// 点击外部关闭菜单（使用现代DOM API）
document.addEventListener('click', (e) => {
    if (!(e.target as Element)?.closest('[data-dropdown-container]')) {
        document.querySelectorAll('[data-dropdown-container]').forEach(container => {
            const panel = container.querySelector('[data-dropdown-panel]');
            const trigger = container.querySelector('[data-dropdown-trigger]');

            panel?.classList.add('float-panel-closed');
            (trigger as HTMLElement)?.setAttribute('aria-expanded', 'false');
            container.classList.remove('is-pinned', 'is-open');
        });
    }
});

// 页面加载完成后初始化
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDropdown);
} else {
    initDropdown();
}

// Swup页面切换时重新初始化
if (window.swup?.hooks) {
    window.swup.hooks.on('page:view', initDropdown);
}
</script>