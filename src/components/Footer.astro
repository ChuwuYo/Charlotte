---

import { profileConfig } from "../config";

import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";

import { url } from "../utils/url-utils";

const currentYear = new Date().getFullYear();
---

<!--<div class="border-t border-[var(&#45;&#45;primary)] mx-16 border-dashed py-8 max-w-[var(&#45;&#45;page-width)] flex flex-col items-center justify-center px-6">-->
<div class="transition border-t border-black/10 dark:border-white/15 my-10 border-dashed mx-32"></div>

<!-- Runtime网站运行计时 -->
<script is:inline define:vars={{ dayUnit: i18n(I18nKey.dayUnit), hourUnit: i18n(I18nKey.hourUnit), minuteUnit: i18n(I18nKey.minuteUnit), secondUnit: i18n(I18nKey.secondUnit) }}>
let uptimeInterval = null;

function updateUptime() {
	const start = new Date("2025-09-29T12:30:00");
	const now = new Date();
	const diff = now.getTime() - start.getTime();

	const days = Math.floor(diff / 1000 / 60 / 60 / 24);
	const hours = Math.floor((diff / 1000 / 60 / 60) % 24);
	const minutes = Math.floor((diff / 1000 / 60) % 60);
	const seconds = Math.floor((diff / 1000) % 60);

	const uptimeStr = `${days}${dayUnit}${hours}${hourUnit}${minutes}${minuteUnit}${seconds}${secondUnit}`;
	const allUptimeElements = document.querySelectorAll('.uptime-display');
	allUptimeElements.forEach(el => {
		el.textContent = uptimeStr;
	});
}

function startUptimeTimer() {
	if (uptimeInterval) clearInterval(uptimeInterval);
	updateUptime();
	uptimeInterval = setInterval(updateUptime, 1000);
}

if (document.readyState === 'loading') {
	document.addEventListener('DOMContentLoaded', startUptimeTimer);
} else {
	startUptimeTimer();
}

if (window.swup?.hooks) {
	window.swup.hooks.on('page:view', () => {
		if (uptimeInterval) clearInterval(uptimeInterval);
		startUptimeTimer();
	});
}

window.addEventListener('beforeunload', () => {
	if (uptimeInterval) {
		clearInterval(uptimeInterval);
		uptimeInterval = null;
	}
});
</script>
<!--<div class="transition bg-[oklch(92%_0.01_var(&#45;&#45;hue))] dark:bg-black rounded-2xl py-8 mt-4 mb-8 flex flex-col items-center justify-center px-6">-->
<div class="transition border-dashed border-[oklch(85%_0.01_var(--hue))] dark:border-white/15 rounded-2xl mb-12 flex flex-col items-center justify-center px-6">
    <div class="transition text-50 text-sm text-center mb-2">
        {i18n(I18nKey.websiteRuntimeText)} <span class="uptime-display transition text-[var(--primary)] font-medium">{i18n(I18nKey.loading)}</span>
    </div>
    <div class="transition text-50 text-sm text-center">
        &copy; <span id="copyright-year">{currentYear}</span> {profileConfig.name}. {i18n(I18nKey.allRightsReserved)} /
        <a class="transition link text-[var(--primary)] font-medium" target="_blank" href={url('rss.xml')}>RSS</a> /
        <a class="transition link text-[var(--primary)] font-medium" target="_blank" href={url('sitemap-index.xml')}>Sitemap</a><br>
        {i18n(I18nKey.poweredBy)}
        <a class="transition link text-[var(--primary)] font-medium" target="_blank" href="https://astro.build">Astro</a> &
        <a class="transition link text-[var(--primary)] font-medium" target="_blank" href="https://github.com/saicaca/fuwari">Fuwari</a>
    </div>
</div>